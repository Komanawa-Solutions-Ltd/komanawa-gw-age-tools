:py:mod:`komanawa.gw_age_tools.lightweight`
===========================================

.. py:module:: komanawa.gw_age_tools.lightweight

.. autoapi-nested-parse::

   created matt_dumont 
   on: 16/05/24



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   komanawa.gw_age_tools.lightweight.lightweight_predict_future
   komanawa.gw_age_tools.lightweight.lightweight_predict_future_int_np



.. py:function:: lightweight_predict_future(source, out_years, ages, age_fractions, precision)

   a lightweight version of predict_future_conc_bepm that does not check inputs and does not interpolate the source concentration and does not check the parmeters... use at your own warning

   :param source:
   :param out_years:
   :param ages:
   :param age_fractions:
   :param precision:
   :return:


.. py:function:: lightweight_predict_future_int_np(source, out_years, ages, age_fractions, adder)

   a lightweight version of predict_future_conc_bepm that does not check inputs and does not interpolate the source concentration and does not check the parmeters... use at your own warning, but 0.05x the runtime of lightweight_predict_future

   The inputs for this are different to the other functions, STRONGLY suggest testing with lightweight_predict_future first

   The inputs relative to lightweight_predict_future are:

   .. code-block:: python

       precision = 2
       age_step, ages, age_fractions = make_age_dist(....)
       source1 = pd.Series(index=np.arange(-ages.max(), 500, 10 ** -precision).round(precision), data=np.nan, dtype=float)
       outages = np.linspace(1, 400, 1000)
       lightweight_predict_future(source1, outages, ages, age_fractions, precision)

       source4.index = (np.round(source4.index * int(10 ** precision))).astype(int)
       outages4 = (np.round(deepcopy(outages) * int(10 ** precision))).astype(int)
       insource = deepcopy(source4).values
       adder = source4.index.min()*-1
       ages4 = (np.round(deepcopy(ages) * int(10 ** precision))).astype(int)
       lightweight_predict_future_int_np(insource, outages4, ages4, age_fractions, adder)

   :param source: np.ndarray, sorted by age
   :param out_years: np.ndarray of years to predict (integer (np.round(deepcopy(outages) * int(10 ** precision))).astype(int))
   :param ages: np.ndarray of ages (integer (np.round(deepcopy(ages) * int(10 ** precision))).astype(int)
   :param adder: integer, the minimum age in the source data (source4.index.min()*-1)
   :return:


